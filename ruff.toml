# Ruff settings ================================================================
line-length = 100
target-version = "py39"
extend-include = ["*.ipynb"]
exclude = ["tests/dummy_plugins/"]

[lint]
# Specify which rules to enforce. Each code corresponds to a specific linting category:
select = [
    "F",    # Enable Pyflakes for identifying logical errors.
    "E",    # Enable pycodestyle error codes (e.g., whitespace, indentation).
    "W",    # Enable pycodestyle warnings.
    "C901", # Enable McCabe complexity checks to avoid overly complex functions.
    "I",    # Import sorting using isort rules
    "N",    # Enforce PEP 8 naming conventions for consistency.
    "D",    # Enable pydocstyle checks to enforce docstring conventions.
    "UP",   # Check for Python version upgrade compatibility.
    "ANN",  # Ensure proper type annotations for function signatures.
    "S",    # Check for common security issues in the codebase (bandit).
    "FBT",  # flake8 plugin to detect boolean traps.
    "B",    # Enable bugbear checks for common mistakes and design flaws.
    "A",    # Check for python builtins being used as variables or parameters.
    "C4",   # Help you write better list/set/dict comprehensions
    "T10",  # Check for pdb; idbp imports and set traces
    "EM",   # A checker for Flake8 that helps format nice error messages
    "FA",    # Check if a type is used in the module that can be rewritten using PEP 563.
    "ISC",   # Encourage correct string literal concatenation
    "ICN",  # Enforce import conventions, including ordering and structure.
    "PIE",  # Encourage Python idiomatic expressions for cleaner code.
    "PT",   # A flake8 plugin checking common style issues with pytest-based tests.
    "Q",    # Flake8 Extension to lint for quotes.
    "RET",  # Flake8 plugin that checks return values.
    "SIM",  # A flake8 plugin that helps you simplify your code.
    "TID",  # A flake8 plugin that helps you write tidier imports.
    "ARG",  # A flake8 plugin that checks for unused function arguments.
    "PTH",  # A plugin for flake8 finding use of functions that can be replaced by pathlib module.
    "ERA",  # ERA find commented-out code from Python files.
    "PD",   # Pandas plugin that provides opinionated linting for pandas code.
    "PL",   # Pylint rules
    "NPY",  # NumPy-specific rules.
    "PERF", # A Linter for performance anti-patterns
    "RUF",  # Ruff-specific rules.
]

# No rules are ignored by default. Specify rule codes here to suppress them.
ignore = [
    "ANN002",   # Missing type annotation for *args
    "ANN003",   # Missing type annotation for **kwargs
    "D105",     # Checks for undocumented magic method definitions
    "D205",     # Checks for docstring summary lines that are not separated from the docstring description by one blank line
    ]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
"tests/*" = [
    "ARG001",   # No unused argument in tests
    "ANN001",   # No type annotation for tests
    "ANN201",   # Missing return type annotation for public function `test_list_modules`
    "D100",     # Missing docstring in public module
    "D103",     # No missing docstring in public function
    "S101",     # Assert can be used in tests
    "PT004",    # Fixture does not return anything, add leading underscore
] 
"*/tests/*" = [
    "ARG001",   # No unused argument in tests
    "ANN001",   # No type annotation for tests
    "ANN201",   # Missing return type annotation for public function `test_list_modules`
    "D100",     # Missing docstring in public module
    "D103",     # No missing docstring in public function
    "S101",     # Assert can be used in tests
    "PT004",    # Fixture does not return anything, add leading underscore
] 

[lint.pydocstyle]
convention = "google" # Google-style convention for for docstrings

[lint.isort] # Add optional configurations for import organization
case-sensitive = true
relative-imports-order = "closest-to-furthest"