# Poetry settings ==============================================================
[tool.poetry]
name = "FAST-OAD-core"
version = "1.8.0" # This version number is overwritten by GitHub packaging workflow but setting this version here will allow installation of CS25 models in development mode
description = "FAST-OAD is a framework for performing rapid Overall Aircraft Design"
readme = "README.md"
authors = [
    "Christophe DAVID <christophe.david@onera.fr>",
    "Scott DELBECQ <Scott.DELBECQ@isae-supaero.fr>"
]
packages = [
    { include = "fastoad", from = "src" },
]
exclude = ["**/tests/**"]

homepage = "https://github.com/fast-aircraft-design/FAST-OAD"
keywords = [
    "aircraft",
    "design",
    "multi-disciplinary"
]
license = "GPL-3.0-only"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics"
]

# User dependencies ------------------------------------------------------------
[tool.poetry.dependencies]
# IMPORTANT: when modifying this list, docs/requirements.txt must be updated for
# ReadTheDocs to be able to compile the documentation.
# A pre-commit hook has been added to do this task. As a result, any modification
# of poetry.lock file will modify docs/requirements.txt and make
# the commit fail because "files were modified by this hook". In that case,
# doing again the commit including changes in docs/requirements.txt will succeed.
python = ">=3.9, <3.13"

numpy = ">=1.23.2, <3"
scipy = "^1.11.2"
pandas = [
    { version = ">=1.3.4, <3", python = "<3.11" },
    { version = ">=1.5.3, <3", python = "~3.11" },
    { version = "^2.1.1", python = "^3.12" },
]
openmdao = "^3.27"
ipopo = [
    { version = "^1.0.0", python = "<3.10" },
    { version = "^3.0.0", python = "^3.10" }
]
ipywidgets = ">=7.7.0, <9"
ipysheet = ">=0.5.0, <1"
plotly = [
    { version = "^5", python = "<3.12" },
    { version = "^5.19", python = "^3.12" }
]
wop = "^2.2.0"
lxml = [
    { version = ">=4.6.5, <6", python = "<3.11" },
    { version = ">=4.9.3, <6", python = "^3.11" },
]
tomlkit = ">=0.5.3, <1"
"ruamel.yaml" = ">=0.15.78, <0.18"
jsonschema = ">=3.2.0, <5"
ensure = [
    { version = "^1.0.0", python = "<3.12" },
    { version = "^1.0.4", python = "^3.12" },
]
tabulate = ">=0.8.9, <1"
aenum = "^3.1.0"
jupyterlab = [
    { version = "^3.4.7", python = "<3.12" },
    { version = "^4.2", python = "^3.12" }
]
stdatm = ">=0.4.2"
Deprecated = "^1.2.13"
click = "^8.0.3"
pyDOE3 = "^1.0.0"
importlib-metadata = { version = "^4.2", python = "<3.10" }

mpi4py = [
    { version = "^3.1.3", python = "<3.11", optional = true },
    { version = "^3.1.4", python = "~3.11", optional = true },
    { version = "^3.1.5", python = "~3.12", optional = true },
]

# Extras ---------------------------------------------------------------
[tool.poetry.extras]
# Activated with:
#    poetry install -E mpi
# or, as a user:
#    pip install fast-oad-core[mpi]
mpi = ["mpi4py"]
mpi4py = ["mpi4py"] # Old way, kept for backward compatibility

# Development dependencies -----------------------------------------------------
[tool.poetry.group.dev.dependencies]
fast-oad-cs25 = ">=0.7.1"

matplotlib = "^3.9.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.0"
pytest-cov = "^5.0"
coverage = { version = "^7.0", extras = ["toml"] }
nbval = "^0.11"
wrapt = "^1.16.0"

[tool.poetry.group.doc.dependencies]
sphinx = ">=7.1.2"
sphinx-rtd-theme = ">=2.0"
sphinxcontrib-bibtex = "^2.6.3"

[tool.poetry.group.lint.dependencies]
pre-commit = "^3.5.0"
nbstripout = "^0.6.0"
ruff = "0.9.2"

# Entry points -----------------------------------------------------------------
[tool.poetry.scripts]
fastoad = "fastoad.cmd.cli:fast_oad"
fast-oad = "fastoad.cmd.cli:fast_oad"

# Plugins ----------------------------------------------------------------------
[tool.poetry.plugins."fastoad.plugins"]
"bundled" = "fastoad"


# Dynamic versioning settings ==================================================
# poetry-dynamic-versioning has to be installed in the same environment as
# Poetry (normally outside your project environment).
# see https://github.com/mtkennerly/poetry-dynamic-versioning#installation
[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"


# Packaging system =============================================================
[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"


# Ruff settings ================================================================
[tool.ruff]
line-length = 100
target-version = "py39"
extend-include = ["*.ipynb"]
exclude = ["tests/dummy_plugins/"]

[tool.ruff.lint]
# Specify which rules to enforce. Each code corresponds to a specific linting category:
select = [
    "E",    # Enable pycodestyle error codes (e.g., whitespace, indentation).
    "F",    # Enable Pyflakes for identifying logical errors.
    "I",    # Import sorting using isort rules
    "C901", # Enable McCabe complexity checks to avoid overly complex functions.
    "D",    # Enable pydocstyle checks to enforce docstring conventions.
    "W",    # Enable pycodestyle warnings (disabled by default in Ruff).
    "N",    # Enforce PEP 8 naming conventions for consistency.
    "A",    # Check for python builtins being used as variables or parameters.
    "ANN",  # Ensure proper type annotations for function signatures.
    "UP",   # Check for Python version upgrade compatibility.
    "B",    # Enable bugbear checks for common mistakes and design flaws.
    "ICN",  # Enforce import conventions, including ordering and structure.
    "PIE",  # Encourage Python idiomatic expressions for cleaner code.
    "S",    # Check for common security issues in the codebase (bandit).
    "RUF",  # Ruff-specific rules.
    "ERA",  # ERA find commented-out code from Python files.
    "NPY",  # NumPy-specific rules.
    "PT",   # A flake8 plugin checking common style issues with pytest-based tests.
    "SIM",  # A flake8 plugin that helps you simplify your code.
    "ARG",  # A flake8 plugin that checks for unused function arguments.
    "PTH",  # A plugin for flake8 finding use of functions that can be replaced by pathlib module.
    "Q",    # Flake8 Extension to lint for quotes.
    "PL",   # Pylint rules
]

# No rules are ignored by default. Specify rule codes here to suppress them.
ignore = [
    "ANN002",   # Missing type annotation for *args
    "ANN003",   # Missing type annotation for **kwargs
    "ANN101",   # Missing type annotation for self in method
    "ANN102",   # Missing type annotation for cls in classmethod
    "D105",     # Checks for undocumented magic method definitions
    "D205",     # Checks for docstring summary lines that are not separated from the docstring description by one blank line
    ]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ARG001",   # No unused argument in tests
    "ANN001",   # No type annotation for tests
    "ANN201",   # Missing return type annotation for public function `test_list_modules`
    "D100",     # Missing docstring in public module
    "D103",     # No missing docstring in public function
    "S101",     # Assert can be used in tests
    "PT004",    # Fixture does not return anything, add leading underscore
] 
"*/tests/*" = [
    "ARG001",   # No unused argument in tests
    "ANN001",   # No type annotation for tests
    "ANN201",   # Missing return type annotation for public function `test_list_modules`
    "D100",     # Missing docstring in public module
    "D103",     # No missing docstring in public function
    "S101",     # Assert can be used in tests
    "PT004",    # Fixture does not return anything, add leading underscore
] 

[tool.ruff.lint.pydocstyle]
convention = "google" # Google-style convention for for docstrings

[tool.ruff.lint.isort] # Add optional configurations for import organization
case-sensitive = true
relative-imports-order = "closest-to-furthest"

# Pytest settings ==============================================================
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "--cov-report term-missing --cov-report html --verbose"
testpaths = ["src"]
norecursedirs = ["dist", "build", ".tox", ".ipynb_checkpoints"]


# Coverage settings ============================================================
[tool.coverage.run]
branch = true
source = ["fastoad"]
omit = ["*/test/*", "*/tests/*"]

# Lines below according to https://pytest-cov.readthedocs.io/en/latest/subprocess-support.html#if-you-use-multiprocessing
concurrency = ["multiprocessing"]
parallel = true
sigterm = true

[tool.coverage.paths]
source = ["src/"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",
    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ = = .__main__.:"
]
